# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from src.polygrasp import grasp_server_pb2 as src_dot_polygrasp_dot_grasp__server__pb2


class GraspServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGrasps = channel.stream_stream(
                '/polygrasp.GraspServer/GetGrasps',
                request_serializer=src_dot_polygrasp_dot_grasp__server__pb2.PointCloud.SerializeToString,
                response_deserializer=src_dot_polygrasp_dot_grasp__server__pb2.GraspGroup.FromString,
                )


class GraspServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetGrasps(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraspServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGrasps': grpc.stream_stream_rpc_method_handler(
                    servicer.GetGrasps,
                    request_deserializer=src_dot_polygrasp_dot_grasp__server__pb2.PointCloud.FromString,
                    response_serializer=src_dot_polygrasp_dot_grasp__server__pb2.GraspGroup.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'polygrasp.GraspServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GraspServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetGrasps(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/polygrasp.GraspServer/GetGrasps',
            src_dot_polygrasp_dot_grasp__server__pb2.PointCloud.SerializeToString,
            src_dot_polygrasp_dot_grasp__server__pb2.GraspGroup.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PointCloudServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPointcloud = channel.stream_stream(
                '/polygrasp.PointCloudServer/GetPointcloud',
                request_serializer=src_dot_polygrasp_dot_grasp__server__pb2.Image.SerializeToString,
                response_deserializer=src_dot_polygrasp_dot_grasp__server__pb2.PointCloud.FromString,
                )


class PointCloudServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPointcloud(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PointCloudServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPointcloud': grpc.stream_stream_rpc_method_handler(
                    servicer.GetPointcloud,
                    request_deserializer=src_dot_polygrasp_dot_grasp__server__pb2.Image.FromString,
                    response_serializer=src_dot_polygrasp_dot_grasp__server__pb2.PointCloud.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'polygrasp.PointCloudServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PointCloudServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPointcloud(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/polygrasp.PointCloudServer/GetPointcloud',
            src_dot_polygrasp_dot_grasp__server__pb2.Image.SerializeToString,
            src_dot_polygrasp_dot_grasp__server__pb2.PointCloud.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
